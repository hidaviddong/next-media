/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as MoviesRouteRouteImport } from './routes/movies/route'
import { Route as RouteRouteImport } from './routes/route'
import { Route as MoviesIndexRouteImport } from './routes/movies/index'
import { Route as MoviesTmdbIdRouteImport } from './routes/movies/$tmdbId'
import { Route as authSignupRouteImport } from './routes/(auth)/signup'
import { Route as authSigninRouteImport } from './routes/(auth)/signin'

const MoviesRouteRoute = MoviesRouteRouteImport.update({
  id: '/movies',
  path: '/movies',
  getParentRoute: () => rootRouteImport,
} as any)
const RouteRoute = RouteRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const MoviesIndexRoute = MoviesIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => MoviesRouteRoute,
} as any)
const MoviesTmdbIdRoute = MoviesTmdbIdRouteImport.update({
  id: '/$tmdbId',
  path: '/$tmdbId',
  getParentRoute: () => MoviesRouteRoute,
} as any)
const authSignupRoute = authSignupRouteImport.update({
  id: '/(auth)/signup',
  path: '/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const authSigninRoute = authSigninRouteImport.update({
  id: '/(auth)/signin',
  path: '/signin',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof RouteRoute
  '/movies': typeof MoviesRouteRouteWithChildren
  '/signin': typeof authSigninRoute
  '/signup': typeof authSignupRoute
  '/movies/$tmdbId': typeof MoviesTmdbIdRoute
  '/movies/': typeof MoviesIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof RouteRoute
  '/signin': typeof authSigninRoute
  '/signup': typeof authSignupRoute
  '/movies/$tmdbId': typeof MoviesTmdbIdRoute
  '/movies': typeof MoviesIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof RouteRoute
  '/movies': typeof MoviesRouteRouteWithChildren
  '/(auth)/signin': typeof authSigninRoute
  '/(auth)/signup': typeof authSignupRoute
  '/movies/$tmdbId': typeof MoviesTmdbIdRoute
  '/movies/': typeof MoviesIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/movies'
    | '/signin'
    | '/signup'
    | '/movies/$tmdbId'
    | '/movies/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/signin' | '/signup' | '/movies/$tmdbId' | '/movies'
  id:
    | '__root__'
    | '/'
    | '/movies'
    | '/(auth)/signin'
    | '/(auth)/signup'
    | '/movies/$tmdbId'
    | '/movies/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  RouteRoute: typeof RouteRoute
  MoviesRouteRoute: typeof MoviesRouteRouteWithChildren
  authSigninRoute: typeof authSigninRoute
  authSignupRoute: typeof authSignupRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/movies': {
      id: '/movies'
      path: '/movies'
      fullPath: '/movies'
      preLoaderRoute: typeof MoviesRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof RouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/movies/': {
      id: '/movies/'
      path: '/'
      fullPath: '/movies/'
      preLoaderRoute: typeof MoviesIndexRouteImport
      parentRoute: typeof MoviesRouteRoute
    }
    '/movies/$tmdbId': {
      id: '/movies/$tmdbId'
      path: '/$tmdbId'
      fullPath: '/movies/$tmdbId'
      preLoaderRoute: typeof MoviesTmdbIdRouteImport
      parentRoute: typeof MoviesRouteRoute
    }
    '/(auth)/signup': {
      id: '/(auth)/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof authSignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/signin': {
      id: '/(auth)/signin'
      path: '/signin'
      fullPath: '/signin'
      preLoaderRoute: typeof authSigninRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface MoviesRouteRouteChildren {
  MoviesTmdbIdRoute: typeof MoviesTmdbIdRoute
  MoviesIndexRoute: typeof MoviesIndexRoute
}

const MoviesRouteRouteChildren: MoviesRouteRouteChildren = {
  MoviesTmdbIdRoute: MoviesTmdbIdRoute,
  MoviesIndexRoute: MoviesIndexRoute,
}

const MoviesRouteRouteWithChildren = MoviesRouteRoute._addFileChildren(
  MoviesRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  RouteRoute: RouteRoute,
  MoviesRouteRoute: MoviesRouteRouteWithChildren,
  authSigninRoute: authSigninRoute,
  authSignupRoute: authSignupRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
